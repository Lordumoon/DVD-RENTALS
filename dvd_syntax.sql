-- Subquery:Find the names and emails of customers who rented a movie in the last 3 months.

SELECT 
    first_name || ' ' || last_name AS customer_name,
    email
FROM 
    customer
WHERE 
    customer_id IN (
        SELECT 
            customer_id
        FROM 
            rental
        WHERE 
            rental_date >= (
                SELECT MAX(rental_date) - INTERVAL '3 months'
                FROM rental));

-- Aggregate Functions: Find the 5 most rented movies and how many times each was rented.

SELECT 
    title AS movie_title,
    COUNT(rental_id) AS rental_count
FROM 
    film
JOIN 
    inventory ON film.film_id = inventory.film_id
JOIN 
    rental  ON inventory.inventory_id = rental.inventory_id
GROUP BY 
   1
ORDER BY 
    rental_count DESC
LIMIT 5;

-- CTE (Common Table Expression): Use a CTE to calculate the total revenue for each movie category.

WITH CategoryRevenue AS (
    SELECT 
        name AS category_name,
        SUM(amount) AS total_revenue
    FROM 
        category
    JOIN 
        film_category ON category.category_id = film_category.category_id
    JOIN 
        inventory ON film_category.film_id = inventory.film_id
    JOIN 
        rental  ON inventory.inventory_id = rental.inventory_id
    JOIN 
        payment  ON rental.rental_id = payment.rental_id
    GROUP BY 
        1
)
SELECT 
    category_name,
    total_revenue
FROM 
    CategoryRevenue
ORDER BY 
    total_revenue DESC;

-- View: Create a view to show each customer's total rentals, total amount spent, and their last rental date.

CREATE VIEW customer_rental_summary AS
SELECT 
    customer.customer_id,
    first_name || ' ' || last_name AS customer_name,
    COUNT(rental.rental_id) AS total_rentals,
    SUM(amount) AS total_spent,
    MAX(rental_date) AS last_rental_date
FROM 
    customer
LEFT JOIN 
    rental ON customer.customer_id = rental.customer_id
LEFT JOIN 
    payment  ON rental.rental_id = payment.rental_id
GROUP BY 
    customer.customer_id, customer.first_name, customer.last_name;



-- Joins:Show the first and last names of customers, the titles of the movies they rented, and the rental dates.
SELECT 
    first_name,
    last_name,
    title AS movie_title,
    rental_date
FROM 
    customer
JOIN 
    rental ON customer.customer_id = rental.customer_id
JOIN 
    inventory ON rental.inventory_id = inventory.inventory_id
JOIN 
    film  ON inventory.film_id = film.film_id
ORDER BY 
    rental.rental_date DESC;


-- Union: Combine two queries:
   - One that shows movies rented in the last 3 months.
   - One that shows movies currently available in inventory.
   Display unique movie titles using UNION.

SELECT DISTINCT title AS movie_title
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
WHERE rental.rental_date >= (
    SELECT MAX(rental_date) - INTERVAL '3 months'
    FROM rental)

-- Movies currently available in inventory
SELECT DISTINCT film.title AS movie_title
FROM film
JOIN inventory ON film.film_id = inventory.film_id
LEFT JOIN rental ON inventory.inventory_id = rental.inventory_id
WHERE rental.return_date IS NOT NULL OR rental.rental_id IS NULL;


-- Grouping with Aggregate Functions: Show the total revenue generated by each staff member.

SELECT 
    first_name || ' ' || last_name AS staff_name,
    SUM(amount) AS total_revenue
FROM 
    staff
JOIN 
    payment ON staff.staff_id = payment.staff_id
GROUP BY 
     1
ORDER BY 
    total_revenue DESC;


-- Subquery with Joins: List all customers who rented movies from the 'Action' category.

SELECT 
    first_name || ' ' || last_name AS customer_name
FROM 
    customer
WHERE 
    customer_id IN ( SELECT customer_id
        FROM 
            rental
        JOIN 
            inventory  ON rental.inventory_id = inventory.inventory_id
        JOIN 
            film_category  ON inventory.film_id = film_category.film_id
        JOIN 
            category ON film_category.category_id = category.category_id
        WHERE 
            category.name = 'Action'
    );


-- CTE with Aggregation: Use a CTE to calculate the average rental duration for each movie category.


WITH RentalDurations AS (
    SELECT 
        category.name AS category_name,
        rental.return_date - rental.rental_date AS rental_duration
    FROM 
        category
    JOIN 
        film_category ON category.category_id = film_category.category_id
    JOIN 
        inventory ON film_category.film_id = inventory.film_id
    JOIN 
        rental  ON inventory.inventory_id = rental.inventory_id
    WHERE 
        rental.return_date IS NOT NULL
)
SELECT 
    category_name,
    AVG(rental_duration) AS average_rental_duration
FROM 
    RentalDurations
GROUP BY 
    category_name;

--- CASE Expression:
    Classify rentals based on their duration:
    - 'Short' for less than 3 days.
    - 'Medium' for 3-7 days.
    - 'Long' for more than 7 days.
    Include the rental ID, customer name, and classification.


	SELECT 
    rental.rental_id,
    customer.first_name || ' ' || customer.last_name AS customer_name,
    CASE 
        WHEN EXTRACT(DAY FROM rental.return_date - rental.rental_date) < 3 THEN 'Short'
        WHEN EXTRACT(DAY FROM rental.return_date - rental.rental_date) BETWEEN 3 AND 7 THEN 'Medium'
        WHEN EXTRACT(DAY FROM rental.return_date - rental.rental_date) > 7 THEN 'Long'
        ELSE 'Unknown'
    END AS rental_classification
FROM 
    rental 
JOIN 
    customer  ON rental.customer_id = customer.customer_id
WHERE 
    rental.return_date IS NOT NULL;

